package swpackage;


import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedList;
import java.util.StringTokenizer;
import java.io.InputStreamReader;
import java.io.BufferedReader;

public class KOI2004_J33 {
	
	static int[][] input;
	static int[][] matrix;
	static int[][] visit;
	static int[][] dp;
	static int[] answer;
	static int[] answer2;
	static int[] answer3;
	static int[] answer4;
	
	static int N;
	static int cnt;
	static int R = 1;
	static int G = 2;
	static int B = 4;
	static int Y = 8;
	static int acnt;
	static int acnt2;
	static int acnt3;
	static int acnt4;
	
	static ArrayList<int[]> first = new ArrayList<>();
	static ArrayList<int[]> second = new ArrayList<>();
	static ArrayList<int[]> third = new ArrayList<>();
	static ArrayList<int[]> forth = new ArrayList<>();
	static ArrayList<int[]> answerl = new ArrayList<>();
	
	static boolean tf1 = false;
	static boolean tf2 = false;
	static boolean tf3 = false;
	static boolean tf4 = false;
	static boolean tf5 = false;
	static boolean atf = true;
	
	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		N = 4;
		input = new int[4][6+1];
		answer = new int[17];
		answer2 = new int[17];
		answer3 = new int[17];
		answer4 = new int[17];
		
		for(int i=0;i<N;i++) {
			String line = sc.next(); 
			//System.out.println(line);
			for(int j=0;j<6;j++) {
				//System.out.print(line.charAt(j));
				if(line.charAt(j)=='R') {
					input[i][j+1] = R;
					//System.out.println("R");
				}else if(line.charAt(j)=='G') {
					input[i][j+1] = G;
					//System.out.println("G");
				}else if(line.charAt(j)=='B') {
					input[i][j+1] = B;
					//System.out.println("B");
				}else if(line.charAt(j)=='Y') {
					input[i][j+1] = Y;
					//System.out.println("Y");
				}


			}
		}
		
		/*
		for(int i=0;i<N;i++) {
			for(int j=1;j<=6;j++) {
				System.out.print(input[i][j]+" ");
			}
			System.out.println();
		}
		*/
		
		makeArrayList(input[0], first);
		makeArrayList(input[1], second);
		makeArrayList(input[2], third);
		makeArrayList(input[3], forth);
		
		/*
		for(int[] iarray : first) {
			System.out.printf("\n%d %d %d %d %d %d", iarray[1],iarray[2],iarray[3],iarray[4],iarray[5],iarray[6]);
		}
		*/
		
		for(int i=0;i<24;i++){
			for(int j=0;j<24;j++) {
				for(int k=0;k<24;k++) {
					for(int l=0;l<24;l++) {
						tf1 = false;
						tf2 = false;
						tf3 = false;
						tf4 = false;
						tf5 = false;
						
						if(first.get(i)[1] + second.get(j)[1] + third.get(k)[1] + forth.get(l)[1] == 15) {
							tf1 = true;
						}
						if(first.get(i)[2] + second.get(j)[2] + third.get(k)[2] + forth.get(l)[2] == 15) {
							tf2 = true;
						}
						if(first.get(i)[3] + second.get(j)[3] + third.get(k)[3] + forth.get(l)[3] == 15) {
							tf3 = true;
						}
						if(first.get(i)[4] + second.get(j)[4] + third.get(k)[4] + forth.get(l)[4] == 15) {
							tf4 = true;
						}
						
						if(tf1==true&&tf2==true&&tf3==true&&tf4==true) {
							cnt++;
						}
						
					}
				}
			}
		}
		
		System.out.println((int) cnt/8);
		
			
	}
	
	static boolean answerCheck(int topcolor,int[] first, int[] second, int[] third, int[] forth) {
		tf5 = false; // answerl 에 넣어도 되는지 return
		atf = true; // answerl 에 넣어도 되는지
		answer[0] = topcolor;
		answer[1] = first[1];
		answer[2] = second[1];
		answer[3] = third[1];
		answer[4] = forth[1];
		answer[5] = first[2];
		answer[6] = second[2];
		answer[7] = third[2];
		answer[8] = forth[2];
		answer[9] = first[3];
		answer[10] = second[3];
		answer[11] = third[3];
		answer[12] = forth[3];
		answer[13] = first[4];
		answer[14] = second[4];
		answer[15] = third[4];
		answer[16] = forth[4];
		
		answer2[0] = topcolor;
		answer2[1] = first[2];
		answer2[2] = second[2];
		answer2[3] = third[2];
		answer2[4] = forth[2];
		answer2[5] = first[3];
		answer2[6] = second[3];
		answer2[7] = third[3];
		answer2[8] = forth[3];
		answer2[9] = first[4];
		answer2[10] = second[4];
		answer2[11] = third[4];
		answer2[12] = forth[4];
		answer2[13] = first[1];
		answer2[14] = second[1];
		answer2[15] = third[1];
		answer2[16] = forth[1];
		
		answer3[0] = topcolor;
		answer3[1] = first[3];
		answer3[2] = second[3];
		answer3[3] = third[3];
		answer3[4] = forth[3];
		answer3[5] = first[4];
		answer3[6] = second[4];
		answer3[7] = third[4];
		answer3[8] = forth[4];
		answer3[9] = first[1];
		answer3[10] = second[1];
		answer3[11] = third[1];
		answer3[12] = forth[1];
		answer3[13] = first[2];
		answer3[14] = second[2];
		answer3[15] = third[2];
		answer3[16] = forth[2];
		
		answer4[0] = topcolor;
		answer4[1] = first[4];
		answer4[2] = second[4];
		answer4[3] = third[4];
		answer4[4] = forth[4];
		answer4[5] = first[1];
		answer4[6] = second[1];
		answer4[7] = third[1];
		answer4[8] = forth[1];
		answer4[9] = first[2];
		answer4[10] = second[2];
		answer4[11] = third[2];
		answer4[12] = forth[2];
		answer4[13] = first[3];
		answer4[14] = second[3];
		answer4[15] = third[3];
		answer4[16] = forth[3];
		
		for(int i=0; i<answerl.size();i++) {
			acnt = 0;
			acnt2 = 0;
			acnt3 = 0;
			acnt4 = 0;
			for(int j=0; j<answerl.get(i).length;j++) {
				
				if(answer[j] == answerl.get(i)[j] ) {
					acnt ++;
				}
				if(answer2[j] == answerl.get(i)[j] ) {
					acnt2 ++;
				}
				if(answer3[j] == answerl.get(i)[j] ) {
					acnt3 ++;
				}
				if(answer4[j] == answerl.get(i)[j] ) {
					acnt4 ++;
				}
				
			}
			if (acnt==17 || acnt2==17 || acnt3==17 || acnt4==17) {
				atf = false;
				break;
			}
			
		}
		
		if(atf == false) {
			tf5 = false;
		}else {
			tf5 = true;
			answerl.add(answer);
			answerl.add(answer2);
			answerl.add(answer3);
			answerl.add(answer4);
			
		}
		
		
		return tf5;
	}
	
	static void makeArrayList(int[] iarray, ArrayList<int[]> il) {
		int[] clonearray;
		
		clonearray = makeArray(iarray, 1,2,3,4,5,6);
		il.add(clonearray);//1
		
		clonearray = makeArray(iarray, 4,1,2,3,5,6);
		il.add(clonearray);//2
		
		clonearray = makeArray(iarray, 3,4,1,2,5,6);
		il.add(clonearray);//3
		
		clonearray = makeArray(iarray, 2,3,4,1,5,6);
		il.add(clonearray);//4
		
		clonearray = makeArray(iarray, 2,5,4,6,1,3);
		il.add(clonearray);//5
		
		clonearray = makeArray(iarray, 6,2,5,4,1,3);
		il.add(clonearray);//6
		
		clonearray = makeArray(iarray, 4,6,2,5,1,3);
		il.add(clonearray);//7
		
		clonearray = makeArray(iarray, 5,4,6,2,1,3);
		il.add(clonearray);//8
		
		clonearray = makeArray(iarray, 2,1,4,3,6,5);
		il.add(clonearray);//9
		
		clonearray = makeArray(iarray, 3,2,1,4,6,5);
		il.add(clonearray);//10
		
		clonearray = makeArray(iarray, 4,3,2,1,6,5);
		il.add(clonearray);//11
		
		clonearray = makeArray(iarray, 1,4,3,2,6,5);
		il.add(clonearray);//12
		
		clonearray = makeArray(iarray, 2,6,4,5,3,1);
		il.add(clonearray);//13
		
		clonearray = makeArray(iarray, 5,2,6,4,3,1);
		il.add(clonearray);//14
		
		clonearray = makeArray(iarray, 4,5,2,6,3,1);
		il.add(clonearray);//15
		
		clonearray = makeArray(iarray, 6,4,5,2,3,1);
		il.add(clonearray);//16
		
		clonearray = makeArray(iarray, 3,5,1,6,2,4);
		il.add(clonearray);//17
		
		clonearray = makeArray(iarray, 6,3,5,1,2,4);
		il.add(clonearray);//18
		
		clonearray = makeArray(iarray, 1,6,3,5,2,4);
		il.add(clonearray);//19
		
		clonearray = makeArray(iarray, 5,1,6,3,2,4);
		il.add(clonearray);//20
		
		clonearray = makeArray(iarray, 5,3,6,1,4,2);
		il.add(clonearray);//21
		
		clonearray = makeArray(iarray, 1,5,3,6,4,2);
		il.add(clonearray);//22
		
		clonearray = makeArray(iarray, 6,1,5,3,4,2);
		il.add(clonearray);//23
		
		clonearray = makeArray(iarray, 3,6,1,5,4,2);
		il.add(clonearray);//24		
	}
	
	static int[] makeArray(int[] iarray, int a, int b, int c, int d, int e, int f) {
		int[] clonearray = new int[7];
		clonearray[1] = iarray[a];
		clonearray[2] = iarray[b];
		clonearray[3] = iarray[c];
		clonearray[4] = iarray[d];
		clonearray[5] = iarray[e];
		clonearray[6] = iarray[f];
		
		
		return clonearray;
	}

}
